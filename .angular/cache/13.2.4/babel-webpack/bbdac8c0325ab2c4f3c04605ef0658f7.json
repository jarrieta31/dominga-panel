{"ast":null,"code":"import _asyncToGenerator from \"/home/administrador/angular/dominga-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/storage\";\nexport class StorageService {\n  constructor(storage) {\n    this.storage = storage; //this.pageTokenExample();\n  }\n  /**\n   * Función para subir los ficheros al Storage de Firebase.\n   * @param tipo Es el tipo de elemento que se va a guardar.\n   * @param directorio Es el nombre del directorio donde debe guardarse la imágen.\n   * @param nombreArchivo - Nombre del archivo a subir.\n   * @param datos - El es propio archivo.\n   * @returns\n   */\n\n\n  subirArchivoCloudStorage(directorio, nombreArchivo, datos) {\n    return this.storage.upload(`/${directorio}/${nombreArchivo}`, datos);\n  }\n  /**\n   * Obtiene una referencia al archvo en la nube de firebase storage.\n   * @param directorio Es el nombre del directorio donde está guardada la imágen.\n   * @param {string} nombreArchivo - Nombre del archivo al que queremos referenciar.\n   * @returns - Refercia al archivo.\n   */\n\n\n  referenciaCloudStorage(directorio, nombreArchivo) {\n    //directorio = this.quitarAcentos(directorio);\n    let ruta = `${directorio}/${nombreArchivo}`;\n    return this.storage.ref(ruta);\n  }\n  /**\n   * Borra un archivo del Storage de Firebase.\n   * El nombre del directorio donde se encuentra el archivo depende de la variable\n   * basePath.\n   * @param directorio Es el nombre del directorio donde está guardada la imágen.\n   * @param {string} nombreArchivo - Nombre del archivo que queremos borrar.\n   */\n\n\n  borrarArchivoStorage(directorio, nombreArchivo) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const storageRef = yield _this.storage.ref(`${directorio}/${nombreArchivo}`);\n      return storageRef.delete().toPromise();\n    })();\n  }\n\n  listarArchvios(directorio) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const storageRef = _this2.storage.ref(`${directorio}`);\n\n      return storageRef.listAll().toPromise();\n    })();\n  }\n  /**\n   * Función que quita acentos, espacios y mayuscúlas para guardar en firestorage.\n   * @param name Nombre del directorio o del archivo a guardar.\n   * @returns\n   */\n\n\n  quitarAcentos(name) {\n    name.trim();\n    name = name.toLowerCase();\n    name = name.replace(/\\s/g, \"_\");\n    name = name.replace(/ñ/g, \"n\");\n    name = name.replace(/Ñ/g, \"N\");\n    name = name.replace(/\\//g, \"-\");\n    name = name.replace(/:/g, \"\");\n    return name.normalize('NFD').replace(/([^n\\u0300-\\u036f]|n(?!\\u0303(?![\\u0300-\\u036f])))[\\u0300-\\u036f]+/gi, \"$1\").normalize();\n  }\n\n}\n\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)(i0.ɵɵinject(i1.AngularFireStorage));\n};\n\nStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/administrador/angular/dominga-panel/src/app/shared/services/storage.service.ts"],"names":["i0","i1","StorageService","constructor","storage","subirArchivoCloudStorage","directorio","nombreArchivo","datos","upload","referenciaCloudStorage","ruta","ref","borrarArchivoStorage","storageRef","delete","toPromise","listarArchvios","listAll","quitarAcentos","name","trim","toLowerCase","replace","normalize","ɵfac","StorageService_Factory","t","ɵɵinject","AngularFireStorage","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf,CADiB,CAEjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,wBAAwB,CAACC,UAAD,EAAaC,aAAb,EAA4BC,KAA5B,EAAmC;AACvD,WAAO,KAAKJ,OAAL,CAAaK,MAAb,CAAqB,IAAGH,UAAW,IAAGC,aAAc,EAApD,EAAuDC,KAAvD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,sBAAsB,CAACJ,UAAD,EAAaC,aAAb,EAA4B;AAC9C;AACA,QAAII,IAAI,GAAI,GAAEL,UAAW,IAAGC,aAAc,EAA1C;AACA,WAAO,KAAKH,OAAL,CAAaQ,GAAb,CAAiBD,IAAjB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,oBAAoB,CAACP,UAAD,EAAaC,aAAb,EAA4B;AAAA;;AAAA;AAClD,YAAMO,UAAU,SAAS,KAAI,CAACV,OAAL,CAAaQ,GAAb,CAAkB,GAAEN,UAAW,IAAGC,aAAc,EAAhD,CAAzB;AACA,aAAOO,UAAU,CAACC,MAAX,GAAoBC,SAApB,EAAP;AAFkD;AAGrD;;AACKC,EAAAA,cAAc,CAACX,UAAD,EAAa;AAAA;;AAAA;AAC7B,YAAMQ,UAAU,GAAG,MAAI,CAACV,OAAL,CAAaQ,GAAb,CAAkB,GAAEN,UAAW,EAA/B,CAAnB;;AACA,aAAOQ,UAAU,CAACI,OAAX,GAAqBF,SAArB,EAAP;AAF6B;AAGhC;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,aAAa,CAACC,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACC,IAAL;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACE,WAAL,EAAP;AACAF,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACAH,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAP;AACA,WAAOH,IAAI,CACNI,SADE,CACQ,KADR,EAEFD,OAFE,CAEM,sEAFN,EAE8E,IAF9E,EAGFC,SAHE,EAAP;AAIH;;AA3DuB;;AA6D5BtB,cAAc,CAACuB,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIzB,cAAV,EAA0BF,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,kBAAf,CAA1B,CAAP;AAAuE,CAAlI;;AACA3B,cAAc,CAAC4B,KAAf,GAAuB,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,cAAT;AAAyB+B,EAAAA,OAAO,EAAE/B,cAAc,CAACuB,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/storage\";\nexport class StorageService {\n    constructor(storage) {\n        this.storage = storage;\n        //this.pageTokenExample();\n    }\n    /**\n     * Función para subir los ficheros al Storage de Firebase.\n     * @param tipo Es el tipo de elemento que se va a guardar.\n     * @param directorio Es el nombre del directorio donde debe guardarse la imágen.\n     * @param nombreArchivo - Nombre del archivo a subir.\n     * @param datos - El es propio archivo.\n     * @returns\n     */\n    subirArchivoCloudStorage(directorio, nombreArchivo, datos) {\n        return this.storage.upload(`/${directorio}/${nombreArchivo}`, datos);\n    }\n    /**\n     * Obtiene una referencia al archvo en la nube de firebase storage.\n     * @param directorio Es el nombre del directorio donde está guardada la imágen.\n     * @param {string} nombreArchivo - Nombre del archivo al que queremos referenciar.\n     * @returns - Refercia al archivo.\n     */\n    referenciaCloudStorage(directorio, nombreArchivo) {\n        //directorio = this.quitarAcentos(directorio);\n        let ruta = `${directorio}/${nombreArchivo}`;\n        return this.storage.ref(ruta);\n    }\n    /**\n     * Borra un archivo del Storage de Firebase.\n     * El nombre del directorio donde se encuentra el archivo depende de la variable\n     * basePath.\n     * @param directorio Es el nombre del directorio donde está guardada la imágen.\n     * @param {string} nombreArchivo - Nombre del archivo que queremos borrar.\n     */\n    async borrarArchivoStorage(directorio, nombreArchivo) {\n        const storageRef = await this.storage.ref(`${directorio}/${nombreArchivo}`);\n        return storageRef.delete().toPromise();\n    }\n    async listarArchvios(directorio) {\n        const storageRef = this.storage.ref(`${directorio}`);\n        return storageRef.listAll().toPromise();\n    }\n    /**\n     * Función que quita acentos, espacios y mayuscúlas para guardar en firestorage.\n     * @param name Nombre del directorio o del archivo a guardar.\n     * @returns\n     */\n    quitarAcentos(name) {\n        name.trim();\n        name = name.toLowerCase();\n        name = name.replace(/\\s/g, \"_\");\n        name = name.replace(/ñ/g, \"n\");\n        name = name.replace(/Ñ/g, \"N\");\n        name = name.replace(/\\//g, \"-\");\n        name = name.replace(/:/g, \"\");\n        return name\n            .normalize('NFD')\n            .replace(/([^n\\u0300-\\u036f]|n(?!\\u0303(?![\\u0300-\\u036f])))[\\u0300-\\u036f]+/gi, \"$1\")\n            .normalize();\n    }\n}\nStorageService.ɵfac = function StorageService_Factory(t) { return new (t || StorageService)(i0.ɵɵinject(i1.AngularFireStorage)); };\nStorageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: StorageService, factory: StorageService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}