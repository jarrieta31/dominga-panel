{"ast":null,"code":"import _asyncToGenerator from \"/home/administrador/angular/dominga-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Timestamp } from \"firebase/firestore\";\nimport { BehaviorSubject, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../shared/services/local-storage.service\";\nexport class EventosService {\n  constructor(afs, ls) {\n    this.afs = afs;\n    this.ls = ls;\n    this.eventos = []; //copia activa local de todos los lugares para trabajar con ella\n\n    this.idNuevoEvento = '';\n    this.mapCache = new Map();\n    this.departamento = \"San José\";\n    this.eventos$ = new BehaviorSubject(this.eventos);\n  }\n  /**\n   * Obtiene todos los eventos desde firestore y los almacena en eventos[] para\n   * no estar consultado la base y minimizar el traficio.\n   */\n\n\n  getEventosFirestore(dpto) {\n    if (!this.mapCache.has(dpto)) {\n      console.log(\"get eventos \" + dpto + \" desde firestore\"); //this.afs.collection('eventos').ref.where('departamento', \"==\", dpto).where('fechaFin', \">=\", Timestamp.fromDate(fechaActual) ).orderBy('fechaFin').get().then(\n\n      this.afs.collection('eventos').ref.where('departamento', \"==\", dpto).get().then(querySnapshot => {\n        let arrEventos = [];\n        querySnapshot.forEach(item => {\n          const data = item.data();\n          arrEventos.push(Object.assign({\n            id: item.id\n          }, data));\n        });\n        this.mapCache.set(dpto, arrEventos.slice());\n        this.eventos = arrEventos.slice(); //this.eventos$.next(this.eventos); //el subject lugares$ emite los lugares\n\n        this.getEventosFiltrados();\n      }).catch(error => {\n        console.error(\"Error en getEventosFirestore(). error:\" + error);\n      });\n    } else {\n      console.log(\"get eventos \" + dpto + \" desde la cache de lugares\");\n      let arrEventos = [];\n      arrEventos = this.mapCache.get(dpto);\n      this.eventos = arrEventos.slice();\n      this.getEventosFiltrados(); //this.eventos$.next(this.eventos)\n    }\n  }\n\n  getEventosFiltrados() {\n    // Por departamento\n    if (this.ls.localidad === '' && this.ls.activos === 'todos' && this.ls.publicado === 'todos') {\n      this.eventos$.next(this.eventos);\n    } // Departamento y Publidados\n    else if (this.ls.localidad === '' && this.ls.activos === 'todos' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n      this.eventos$.next(this.eventos.filter(evento => evento.publicado == p));\n    } // Departamentos y Activos\n    else if (this.ls.localidad === '' && this.ls.activos !== 'todos' && this.ls.publicado === 'todos') {\n      if (this.ls.activos === 'activos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.fechaFin.seconds >= Timestamp.fromDate(new Date()).seconds));\n      } else if (this.ls.activos === 'inactivos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.fechaFin.seconds < Timestamp.fromDate(new Date()).seconds));\n      }\n    } // Departamento, Activos y Publicados \n    else if (this.ls.localidad === '' && this.ls.activos !== 'todos' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n\n      if (this.ls.activos === 'activos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.publicado == p && evento.fechaFin.seconds >= Timestamp.fromDate(new Date()).seconds));\n      } else if (this.ls.activos === 'inactivos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.publicado == p && evento.fechaFin.seconds < Timestamp.fromDate(new Date()).seconds));\n      }\n    } // Departamento y Localidad \n    else if (this.ls.localidad !== '' && this.ls.activos === 'todos' && this.ls.publicado === 'todos') {\n      this.eventos$.next(this.eventos.filter(evento => evento.localidad === this.ls.localidad));\n    } // Departamento, Localidad y Publidados\n    else if (this.ls.localidad !== '' && this.ls.activos === 'todos' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n      this.eventos$.next(this.eventos.filter(evento => evento.localidad === this.ls.localidad && evento.publicado == p));\n    } //Departamento Localidad y Activo\n    else if (this.ls.localidad !== '' && this.ls.activos !== 'todos' && this.ls.publicado === 'todos') {\n      if (this.ls.activos === 'activos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds >= Timestamp.fromDate(new Date()).seconds));\n      } else if (this.ls.activos === 'inactivos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds < Timestamp.fromDate(new Date()).seconds));\n      }\n    } //Departamento Localidad Activos y Publicados\n    else if (this.ls.localidad !== '' && this.ls.activos !== 'todos' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n\n      if (this.ls.activos === 'activos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds >= Timestamp.fromDate(new Date()).seconds && evento.publicado == p));\n      } else if (this.ls.activos === 'inactivos') {\n        this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds < Timestamp.fromDate(new Date()).seconds && evento.publicado == p));\n      }\n    }\n  }\n  /** Obtiene el evento a partir del id que recibe y */\n\n\n  getEventoId(id) {\n    const eventoEncontrado = this.eventos.filter(item => item.id == id);\n    return from(eventoEncontrado);\n  }\n  /**\n   * Agrega un evento en firestore, obteniendo el id resultante para luego insertarlo en el\n   * array local eventos.\n   * @param evento Contiene la información del nuevo evento.\n   * @returns Retorna el ID del evento obtenido de firestore\n   */\n\n\n  addEvento(evento) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let nuevoId;\n\n      try {\n        const documentRef = yield _this.afs.collection('eventos').add(evento);\n        nuevoId = documentRef.id;\n        evento.id = nuevoId;\n\n        _this.eventos.push(evento);\n\n        _this.mapCache.set(evento.departamento, _this.eventos);\n      } catch (error) {\n        console.error(\"Se produjo un error al agregar un nuevo evento. Error: \" + error);\n      }\n\n      return new Promise((resolve, reject) => {\n        if (nuevoId !== undefined && nuevoId.length > 0) {\n          resolve(nuevoId);\n        } else {\n          reject(\"No se puedo obtener el ID\");\n        }\n      });\n    })();\n  }\n  /**\n   * Actuliza la información de lugar en la nube de Firestore, utilizando el método destructivo \"set\" (borra todo lo que este y\n   * guarda solo los valores actuales).\n   * @param lugar Contiene todos los datos del lugar menos el ID.\n   * @returns\n   */\n\n\n  updateEventoFirestore(evento, id) {\n    return this.afs.doc(`eventos/${id}`).set(evento); //en ves de pasar el lugar completo se puede poner campo por campo        \n  }\n  /**\n   * Actualiza la información de un lugar ya existente en el array local lugares.\n   * @param data Es la data con toda la información del lugar includio el ID\n   */\n\n\n  updateEventoLocal(data) {\n    let i = this.eventos.findIndex(evento => evento.id === data.id);\n    this.eventos[i] = JSON.parse(JSON.stringify(data));\n    this.mapCache.set(data.departamento, this.eventos);\n  }\n\n  getCache(nombreDpto) {\n    return this.mapCache.get(nombreDpto);\n  }\n  /**\n   * Obtiene el observable del Subject eventos$ con la lista de todos los eventos.\n   * @returns {Observable}\n   */\n\n\n  getObsEventos$() {\n    return this.eventos$.asObservable();\n  }\n\n  emitirEventos() {\n    this.eventos$.next(this.eventos);\n  }\n  /** Elimina correctamente el evento */\n\n\n  deleteEvento(id) {\n    let indiceEliminar = this.eventos.findIndex(item => item.id === id);\n    this.afs.collection('eventos').doc(id).delete().then(res => {\n      this.eventos.splice(indiceEliminar, 1);\n      this.emitirEventos();\n      console.log(\"Evento eliminado correntamente\");\n    }).catch(err => {\n      console.error(\"Se produjo un error al intentar eliminar un el evento \" + id + \". Error:\" + err);\n    });\n  }\n  /**\n   * test Ok: Filtra lugares por departamento en el array local lugares. La lista\n   * resultante es emitida desde el Subject lugares$.\n   * @param {String} departamento Nombre del departamento por el cual se realiza la busqueda.\n   */\n\n\n  getEventosPorDepartamento(departamento) {\n    let eventosDepartamento = this.eventos.filter(evento => evento.departamento === departamento);\n    this.eventos$.next(eventosDepartamento);\n  }\n  /** OK: Filtra por el estado de publicacion y por el departamento, luego\n   * actualiza el Subject  lugares$\n    */\n\n\n  getEventosPublicadoYDepartamento(pub, depto) {\n    this.eventos$.next(this.eventos.filter(evento => {\n      if (evento.publicado === pub && evento.departamento === depto) {\n        return true;\n      } else {\n        return false;\n      }\n    }));\n  }\n\n  getEventosPublicadoDepartamentoLocalidad(pub, dpto, loc) {\n    this.eventos$.next(this.eventos.filter(evento => {\n      if (evento.publicado === pub && evento.departamento === dpto && evento.localidad === loc) {\n        return true;\n      } else {\n        return false;\n      }\n    }));\n  }\n\n  getEventosLocalidad(loc) {\n    let eventosLocalidad = this.eventos.filter(evento => evento.localidad === loc);\n    this.eventos$.next(eventosLocalidad);\n  }\n  /**\n   *  Función para generar string random, se utilizar para crear el nombre de la carpeta\n   * que almacena las imagenes. Funciona como un id.\n   * @param length Es largo que queremos el string.\n   * @returns Retorna un string random.\n   */\n\n\n  randomString(length) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var result = '';\n\n    for (var i = 0; i < length; i++) {\n      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n    }\n\n    return result;\n  }\n\n}\n\nEventosService.ɵfac = function EventosService_Factory(t) {\n  return new (t || EventosService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.LocalStorageService));\n};\n\nEventosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventosService,\n  factory: EventosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/administrador/angular/dominga-panel/src/app/eventos/services/eventos.service.ts"],"names":["Timestamp","BehaviorSubject","from","i0","i1","i2","EventosService","constructor","afs","ls","eventos","idNuevoEvento","mapCache","Map","departamento","eventos$","getEventosFirestore","dpto","has","console","log","collection","ref","where","get","then","querySnapshot","arrEventos","forEach","item","data","push","Object","assign","id","set","slice","getEventosFiltrados","catch","error","localidad","activos","publicado","next","p","filter","evento","fechaFin","seconds","fromDate","Date","getEventoId","eventoEncontrado","addEvento","nuevoId","documentRef","add","Promise","resolve","reject","undefined","length","updateEventoFirestore","doc","updateEventoLocal","i","findIndex","JSON","parse","stringify","getCache","nombreDpto","getObsEventos$","asObservable","emitirEventos","deleteEvento","indiceEliminar","delete","res","splice","err","getEventosPorDepartamento","eventosDepartamento","getEventosPublicadoYDepartamento","pub","depto","getEventosPublicadoDepartamentoLocalidad","loc","getEventosLocalidad","eventosLocalidad","randomString","randomChars","result","charAt","Math","floor","random","ɵfac","EventosService_Factory","t","ɵɵinject","AngularFirestore","LocalStorageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { Timestamp } from \"firebase/firestore\";\nimport { BehaviorSubject, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../shared/services/local-storage.service\";\nexport class EventosService {\n    constructor(afs, ls) {\n        this.afs = afs;\n        this.ls = ls;\n        this.eventos = []; //copia activa local de todos los lugares para trabajar con ella\n        this.idNuevoEvento = '';\n        this.mapCache = new Map();\n        this.departamento = \"San José\";\n        this.eventos$ = new BehaviorSubject(this.eventos);\n    }\n    /**\n     * Obtiene todos los eventos desde firestore y los almacena en eventos[] para\n     * no estar consultado la base y minimizar el traficio.\n     */\n    getEventosFirestore(dpto) {\n        if (!this.mapCache.has(dpto)) {\n            console.log(\"get eventos \" + dpto + \" desde firestore\");\n            //this.afs.collection('eventos').ref.where('departamento', \"==\", dpto).where('fechaFin', \">=\", Timestamp.fromDate(fechaActual) ).orderBy('fechaFin').get().then(\n            this.afs.collection('eventos').ref.where('departamento', \"==\", dpto).get().then(querySnapshot => {\n                let arrEventos = [];\n                querySnapshot.forEach(item => {\n                    const data = item.data();\n                    arrEventos.push(Object.assign({ id: item.id }, data));\n                });\n                this.mapCache.set(dpto, arrEventos.slice());\n                this.eventos = arrEventos.slice();\n                //this.eventos$.next(this.eventos); //el subject lugares$ emite los lugares\n                this.getEventosFiltrados();\n            }).catch(error => {\n                console.error(\"Error en getEventosFirestore(). error:\" + error);\n            });\n        }\n        else {\n            console.log(\"get eventos \" + dpto + \" desde la cache de lugares\");\n            let arrEventos = [];\n            arrEventos = this.mapCache.get(dpto);\n            this.eventos = arrEventos.slice();\n            this.getEventosFiltrados();\n            //this.eventos$.next(this.eventos)\n        }\n    }\n    getEventosFiltrados() {\n        // Por departamento\n        if (this.ls.localidad === '' && this.ls.activos === 'todos' && this.ls.publicado === 'todos') {\n            this.eventos$.next(this.eventos);\n        }\n        // Departamento y Publidados\n        else if (this.ls.localidad === '' && this.ls.activos === 'todos' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            this.eventos$.next(this.eventos.filter(evento => evento.publicado == p));\n        }\n        // Departamentos y Activos\n        else if (this.ls.localidad === '' && this.ls.activos !== 'todos' && this.ls.publicado === 'todos') {\n            if (this.ls.activos === 'activos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.fechaFin.seconds >= Timestamp.fromDate(new Date).seconds));\n            }\n            else if (this.ls.activos === 'inactivos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.fechaFin.seconds < Timestamp.fromDate(new Date).seconds));\n            }\n        }\n        // Departamento, Activos y Publicados \n        else if (this.ls.localidad === '' && this.ls.activos !== 'todos' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            if (this.ls.activos === 'activos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.publicado == p && evento.fechaFin.seconds >= Timestamp.fromDate(new Date).seconds));\n            }\n            else if (this.ls.activos === 'inactivos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.publicado == p && evento.fechaFin.seconds < Timestamp.fromDate(new Date).seconds));\n            }\n        }\n        // Departamento y Localidad \n        else if (this.ls.localidad !== '' && this.ls.activos === 'todos' && this.ls.publicado === 'todos') {\n            this.eventos$.next(this.eventos.filter(evento => evento.localidad === this.ls.localidad));\n        }\n        // Departamento, Localidad y Publidados\n        else if (this.ls.localidad !== '' && this.ls.activos === 'todos' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            this.eventos$.next(this.eventos.filter(evento => evento.localidad === this.ls.localidad && evento.publicado == p));\n        }\n        //Departamento Localidad y Activo\n        else if (this.ls.localidad !== '' && this.ls.activos !== 'todos' && this.ls.publicado === 'todos') {\n            if (this.ls.activos === 'activos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds >= Timestamp.fromDate(new Date).seconds));\n            }\n            else if (this.ls.activos === 'inactivos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds < Timestamp.fromDate(new Date).seconds));\n            }\n        }\n        //Departamento Localidad Activos y Publicados\n        else if (this.ls.localidad !== '' && this.ls.activos !== 'todos' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            if (this.ls.activos === 'activos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds >= Timestamp.fromDate(new Date).seconds && evento.publicado == p));\n            }\n            else if (this.ls.activos === 'inactivos') {\n                this.eventos$.next(this.eventos.filter(evento => evento.localidad == this.ls.localidad && evento.fechaFin.seconds < Timestamp.fromDate(new Date).seconds && evento.publicado == p));\n            }\n        }\n    }\n    /** Obtiene el evento a partir del id que recibe y */\n    getEventoId(id) {\n        const eventoEncontrado = this.eventos.filter(item => item.id == id);\n        return from(eventoEncontrado);\n    }\n    /**\n     * Agrega un evento en firestore, obteniendo el id resultante para luego insertarlo en el\n     * array local eventos.\n     * @param evento Contiene la información del nuevo evento.\n     * @returns Retorna el ID del evento obtenido de firestore\n     */\n    async addEvento(evento) {\n        let nuevoId;\n        try {\n            const documentRef = await this.afs.collection('eventos').add(evento);\n            nuevoId = documentRef.id;\n            evento.id = nuevoId;\n            this.eventos.push(evento);\n            this.mapCache.set(evento.departamento, this.eventos);\n        }\n        catch (error) {\n            console.error(\"Se produjo un error al agregar un nuevo evento. Error: \" + error);\n        }\n        return new Promise((resolve, reject) => {\n            if (nuevoId !== undefined && nuevoId.length > 0) {\n                resolve(nuevoId);\n            }\n            else {\n                reject(\"No se puedo obtener el ID\");\n            }\n        });\n    }\n    /**\n     * Actuliza la información de lugar en la nube de Firestore, utilizando el método destructivo \"set\" (borra todo lo que este y\n     * guarda solo los valores actuales).\n     * @param lugar Contiene todos los datos del lugar menos el ID.\n     * @returns\n     */\n    updateEventoFirestore(evento, id) {\n        return this.afs.doc(`eventos/${id}`).set(evento); //en ves de pasar el lugar completo se puede poner campo por campo        \n    }\n    /**\n     * Actualiza la información de un lugar ya existente en el array local lugares.\n     * @param data Es la data con toda la información del lugar includio el ID\n     */\n    updateEventoLocal(data) {\n        let i = this.eventos.findIndex(evento => evento.id === data.id);\n        this.eventos[i] = JSON.parse(JSON.stringify(data));\n        this.mapCache.set(data.departamento, this.eventos);\n    }\n    getCache(nombreDpto) {\n        return this.mapCache.get(nombreDpto);\n    }\n    /**\n     * Obtiene el observable del Subject eventos$ con la lista de todos los eventos.\n     * @returns {Observable}\n     */\n    getObsEventos$() {\n        return this.eventos$.asObservable();\n    }\n    emitirEventos() {\n        this.eventos$.next(this.eventos);\n    }\n    /** Elimina correctamente el evento */\n    deleteEvento(id) {\n        let indiceEliminar = this.eventos.findIndex(item => item.id === id);\n        this.afs.collection('eventos').doc(id).delete().then(res => {\n            this.eventos.splice(indiceEliminar, 1);\n            this.emitirEventos();\n            console.log(\"Evento eliminado correntamente\");\n        }).catch(err => {\n            console.error(\"Se produjo un error al intentar eliminar un el evento \" + id + \". Error:\" + err);\n        });\n    }\n    /**\n     * test Ok: Filtra lugares por departamento en el array local lugares. La lista\n     * resultante es emitida desde el Subject lugares$.\n     * @param {String} departamento Nombre del departamento por el cual se realiza la busqueda.\n     */\n    getEventosPorDepartamento(departamento) {\n        let eventosDepartamento = this.eventos.filter(evento => evento.departamento === departamento);\n        this.eventos$.next(eventosDepartamento);\n    }\n    /** OK: Filtra por el estado de publicacion y por el departamento, luego\n     * actualiza el Subject  lugares$\n      */\n    getEventosPublicadoYDepartamento(pub, depto) {\n        this.eventos$.next(this.eventos.filter(evento => {\n            if (evento.publicado === pub && evento.departamento === depto) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }));\n    }\n    getEventosPublicadoDepartamentoLocalidad(pub, dpto, loc) {\n        this.eventos$.next(this.eventos.filter(evento => {\n            if (evento.publicado === pub && evento.departamento === dpto && evento.localidad === loc) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }));\n    }\n    getEventosLocalidad(loc) {\n        let eventosLocalidad = this.eventos.filter(evento => evento.localidad === loc);\n        this.eventos$.next(eventosLocalidad);\n    }\n    /**\n     *  Función para generar string random, se utilizar para crear el nombre de la carpeta\n     * que almacena las imagenes. Funciona como un id.\n     * @param length Es largo que queremos el string.\n     * @returns Retorna un string random.\n     */\n    randomString(length) {\n        var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n        for (var i = 0; i < length; i++) {\n            result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n        }\n        return result;\n    }\n}\nEventosService.ɵfac = function EventosService_Factory(t) { return new (t || EventosService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.LocalStorageService)); };\nEventosService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: EventosService, factory: EventosService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}