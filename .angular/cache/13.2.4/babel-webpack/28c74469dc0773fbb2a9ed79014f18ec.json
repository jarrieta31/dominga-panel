{"ast":null,"code":"import _asyncToGenerator from \"/home/administrador/angular/dominga-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../shared/services/local-storage.service\";\nexport class DondeDormirService {\n  constructor(afs, ls) {\n    this.afs = afs;\n    this.ls = ls;\n    this.hoteles = []; //copia local de todos los hoteles para trabajar con ella\n\n    this.mapCache = new Map();\n    this.hotelesRef = this.afs.collection('donde_dormir');\n    this.departamento = \"San José\";\n    this.hoteles$ = new BehaviorSubject(this.hoteles);\n  }\n  /**\n   * Obtiene todos los hoteles desde firestore y los almacena en hoteles[] para\n   * no estar consultado la base y minimizar el traficio.\n   */\n\n\n  getHotelesFirestore(dpto) {\n    if (!this.mapCache.has(dpto) || this.hoteles.length === 0) {\n      console.log(\"get hoteles \" + dpto + \" desde firestore\"); //        this.afs.collection('eventos').ref.where('departamento', \"==\", departament).where('prioridad', \">\", -1).orderBy('prioridad').get().then(\n\n      this.hotelesRef.ref.where('departamento', \"==\", dpto).get().then(querySnapshot => {\n        const arrRestaurantes = [];\n        querySnapshot.forEach(item => {\n          const data = item.data();\n          arrRestaurantes.push(Object.assign({\n            id: item.id\n          }, data));\n        });\n        this.mapCache.set(dpto, arrRestaurantes.slice());\n        this.hoteles = arrRestaurantes.slice();\n        this.getHotelesFiltrados();\n      }).catch(error => {\n        console.error(\"Error en getEventosFirestore(). error:\" + error);\n      });\n    } else {\n      console.log(\"get hoteles \" + dpto + \" desde la cache\");\n      this.hoteles = this.mapCache.get(dpto);\n      this.getHotelesFiltrados();\n    }\n  }\n  /**\n   * Función que realiza todos los filtros para hoteles.\n   * Los filtros se realizan sobre el array local de hoteles.\n   */\n\n\n  getHotelesFiltrados() {\n    // Por departamento\n    if (this.ls.localidad === '' && this.ls.publicado === 'todos') {\n      this.hoteles$.next(this.hoteles);\n    } // Departamento y Publidados\n    else if (this.ls.localidad === '' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n      this.hoteles$.next(this.hoteles.filter(evento => evento.publicado == p));\n    } // Departamento y Localidad \n    else if (this.ls.localidad !== '' && this.ls.publicado === 'todos') {\n      this.hoteles$.next(this.hoteles.filter(evento => evento.localidad === this.ls.localidad));\n    } // Departamento, Localidad y Publidados\n    else if (this.ls.localidad !== '' && this.ls.activos === 'todos' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n      this.hoteles$.next(this.hoteles.filter(evento => evento.localidad === this.ls.localidad && evento.publicado == p));\n    }\n  }\n  /** Obtiene el evento a partir del id que recibe y */\n\n\n  geHotelId(id) {\n    const restoranEncontrado = this.hoteles.filter(item => item.id == id);\n    return from(restoranEncontrado);\n  }\n  /**\n   * Agrega un hotel en firestore, obteniendo el id resultante para luego insertarlo en el\n   * array local eventos.\n   * @param hotel Contiene la información del nuevo evento.\n   * @returns Retorna el ID del evento obtenido de firestore\n   */\n\n\n  addHotel(hotel) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let nuevoId;\n\n      try {\n        const documentRef = yield _this.hotelesRef.add(hotel);\n        nuevoId = documentRef.id;\n        hotel.id = nuevoId;\n\n        _this.hoteles.push(hotel);\n\n        _this.mapCache.set(hotel.departamento, _this.hoteles);\n      } catch (error) {\n        console.error(\"Se produjo un error al agregar un nuevo hotel. Error: \" + error);\n      }\n\n      return new Promise((resolve, reject) => {\n        if (nuevoId !== undefined && nuevoId.length > 0) {\n          resolve(nuevoId);\n        } else {\n          reject(\"No se puedo obtener el ID\");\n        }\n      });\n    })();\n  }\n  /**\n   * Actuliza la información de lugar en la nube de Firestore, utilizando el método destructivo \"set\" (borra todo lo que este y\n   * guarda solo los valores actuales).\n   * @param lugar Contiene todos los datos del lugar menos el ID.\n   * @returns\n   */\n\n\n  updateHotelFirestore(hotel, id) {\n    return this.afs.doc(`donde_dormir/${id}`).set(hotel); //en ves de pasar el lugar completo se puede poner campo por campo        \n  }\n  /**\n   * Actualiza la información de un hotel ya existente en el array local hoteles.\n   * Y actualiza la cache de hoteles.\n   * @param data Es la data con toda la información del lugar includio el ID\n   */\n\n\n  updateHotelLocal(data) {\n    console.log(\"ID: \" + data.id);\n    let i = this.hoteles.findIndex(hotel => hotel.id === data.id);\n    this.hoteles[i] = JSON.parse(JSON.stringify(data));\n    this.mapCache.set(data.departamento, this.hoteles); //this.hoteles$.next(this.hoteles);\n  }\n\n  getCache(nombreDpto) {\n    return this.mapCache.get(nombreDpto);\n  }\n  /**\n   * Obtiene el observable del Subject hoteles$ con la lista de todos los hoteles.\n   * @returns {Observable}\n   */\n\n\n  getObsHoteles$() {\n    return this.hoteles$.asObservable();\n  }\n\n  emitirHoteles() {\n    this.hoteles$.next(this.hoteles);\n  }\n  /** Elimina correctamente el evento */\n\n\n  deleteHotel(id) {\n    let indiceEliminar = this.hoteles.findIndex(item => item.id === id);\n    this.hotelesRef.doc(id).delete().then(res => {\n      this.hoteles.splice(indiceEliminar, 1);\n      this.emitirHoteles();\n      console.log(\"Evento eliminado correntamente\");\n    }).catch(err => {\n      console.error(\"Se produjo un error al intentar eliminar un el evento \" + id + \". Error:\" + err);\n    });\n  }\n  /**\n   *  Función para generar string random, se utilizar para crear el nombre de la carpeta\n   * que almacena las imagenes. Funciona como un id.\n   * @param length Es largo que queremos el string.\n   * @returns Retorna un string random.\n   */\n\n\n  randomString(length) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var result = '';\n\n    for (var i = 0; i < length; i++) {\n      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n    }\n\n    return result;\n  }\n\n}\n\nDondeDormirService.ɵfac = function DondeDormirService_Factory(t) {\n  return new (t || DondeDormirService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.LocalStorageService));\n};\n\nDondeDormirService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DondeDormirService,\n  factory: DondeDormirService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/administrador/angular/dominga-panel/src/app/donde-dormir/services/donde-dormir.service.ts"],"names":["BehaviorSubject","from","i0","i1","i2","DondeDormirService","constructor","afs","ls","hoteles","mapCache","Map","hotelesRef","collection","departamento","hoteles$","getHotelesFirestore","dpto","has","length","console","log","ref","where","get","then","querySnapshot","arrRestaurantes","forEach","item","data","push","Object","assign","id","set","slice","getHotelesFiltrados","catch","error","localidad","publicado","next","p","filter","evento","activos","geHotelId","restoranEncontrado","addHotel","hotel","nuevoId","documentRef","add","Promise","resolve","reject","undefined","updateHotelFirestore","doc","updateHotelLocal","i","findIndex","JSON","parse","stringify","getCache","nombreDpto","getObsHoteles$","asObservable","emitirHoteles","deleteHotel","indiceEliminar","delete","res","splice","err","randomString","randomChars","result","charAt","Math","floor","random","ɵfac","DondeDormirService_Factory","t","ɵɵinject","AngularFirestore","LocalStorageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../shared/services/local-storage.service\";\nexport class DondeDormirService {\n    constructor(afs, ls) {\n        this.afs = afs;\n        this.ls = ls;\n        this.hoteles = []; //copia local de todos los hoteles para trabajar con ella\n        this.mapCache = new Map();\n        this.hotelesRef = this.afs.collection('donde_dormir');\n        this.departamento = \"San José\";\n        this.hoteles$ = new BehaviorSubject(this.hoteles);\n    }\n    /**\n     * Obtiene todos los hoteles desde firestore y los almacena en hoteles[] para\n     * no estar consultado la base y minimizar el traficio.\n     */\n    getHotelesFirestore(dpto) {\n        if (!this.mapCache.has(dpto) || this.hoteles.length === 0) {\n            console.log(\"get hoteles \" + dpto + \" desde firestore\");\n            //        this.afs.collection('eventos').ref.where('departamento', \"==\", departament).where('prioridad', \">\", -1).orderBy('prioridad').get().then(\n            this.hotelesRef.ref.where('departamento', \"==\", dpto).get().then(querySnapshot => {\n                const arrRestaurantes = [];\n                querySnapshot.forEach(item => {\n                    const data = item.data();\n                    arrRestaurantes.push(Object.assign({ id: item.id }, data));\n                });\n                this.mapCache.set(dpto, arrRestaurantes.slice());\n                this.hoteles = arrRestaurantes.slice();\n                this.getHotelesFiltrados();\n            }).catch(error => {\n                console.error(\"Error en getEventosFirestore(). error:\" + error);\n            });\n        }\n        else {\n            console.log(\"get hoteles \" + dpto + \" desde la cache\");\n            this.hoteles = this.mapCache.get(dpto);\n            this.getHotelesFiltrados();\n        }\n    }\n    /**\n     * Función que realiza todos los filtros para hoteles.\n     * Los filtros se realizan sobre el array local de hoteles.\n     */\n    getHotelesFiltrados() {\n        // Por departamento\n        if (this.ls.localidad === '' && this.ls.publicado === 'todos') {\n            this.hoteles$.next(this.hoteles);\n        }\n        // Departamento y Publidados\n        else if (this.ls.localidad === '' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            this.hoteles$.next(this.hoteles.filter(evento => evento.publicado == p));\n        }\n        // Departamento y Localidad \n        else if (this.ls.localidad !== '' && this.ls.publicado === 'todos') {\n            this.hoteles$.next(this.hoteles.filter(evento => evento.localidad === this.ls.localidad));\n        }\n        // Departamento, Localidad y Publidados\n        else if (this.ls.localidad !== '' && this.ls.activos === 'todos' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            this.hoteles$.next(this.hoteles.filter(evento => evento.localidad === this.ls.localidad && evento.publicado == p));\n        }\n    }\n    /** Obtiene el evento a partir del id que recibe y */\n    geHotelId(id) {\n        const restoranEncontrado = this.hoteles.filter(item => item.id == id);\n        return from(restoranEncontrado);\n    }\n    /**\n     * Agrega un hotel en firestore, obteniendo el id resultante para luego insertarlo en el\n     * array local eventos.\n     * @param hotel Contiene la información del nuevo evento.\n     * @returns Retorna el ID del evento obtenido de firestore\n     */\n    async addHotel(hotel) {\n        let nuevoId;\n        try {\n            const documentRef = await this.hotelesRef.add(hotel);\n            nuevoId = documentRef.id;\n            hotel.id = nuevoId;\n            this.hoteles.push(hotel);\n            this.mapCache.set(hotel.departamento, this.hoteles);\n        }\n        catch (error) {\n            console.error(\"Se produjo un error al agregar un nuevo hotel. Error: \" + error);\n        }\n        return new Promise((resolve, reject) => {\n            if (nuevoId !== undefined && nuevoId.length > 0) {\n                resolve(nuevoId);\n            }\n            else {\n                reject(\"No se puedo obtener el ID\");\n            }\n        });\n    }\n    /**\n     * Actuliza la información de lugar en la nube de Firestore, utilizando el método destructivo \"set\" (borra todo lo que este y\n     * guarda solo los valores actuales).\n     * @param lugar Contiene todos los datos del lugar menos el ID.\n     * @returns\n     */\n    updateHotelFirestore(hotel, id) {\n        return this.afs.doc(`donde_dormir/${id}`).set(hotel); //en ves de pasar el lugar completo se puede poner campo por campo        \n    }\n    /**\n     * Actualiza la información de un hotel ya existente en el array local hoteles.\n     * Y actualiza la cache de hoteles.\n     * @param data Es la data con toda la información del lugar includio el ID\n     */\n    updateHotelLocal(data) {\n        console.log(\"ID: \" + data.id);\n        let i = this.hoteles.findIndex(hotel => hotel.id === data.id);\n        this.hoteles[i] = JSON.parse(JSON.stringify(data));\n        this.mapCache.set(data.departamento, this.hoteles);\n        //this.hoteles$.next(this.hoteles);\n    }\n    getCache(nombreDpto) {\n        return this.mapCache.get(nombreDpto);\n    }\n    /**\n     * Obtiene el observable del Subject hoteles$ con la lista de todos los hoteles.\n     * @returns {Observable}\n     */\n    getObsHoteles$() {\n        return this.hoteles$.asObservable();\n    }\n    emitirHoteles() {\n        this.hoteles$.next(this.hoteles);\n    }\n    /** Elimina correctamente el evento */\n    deleteHotel(id) {\n        let indiceEliminar = this.hoteles.findIndex(item => item.id === id);\n        this.hotelesRef.doc(id).delete().then(res => {\n            this.hoteles.splice(indiceEliminar, 1);\n            this.emitirHoteles();\n            console.log(\"Evento eliminado correntamente\");\n        }).catch(err => {\n            console.error(\"Se produjo un error al intentar eliminar un el evento \" + id + \". Error:\" + err);\n        });\n    }\n    /**\n     *  Función para generar string random, se utilizar para crear el nombre de la carpeta\n     * que almacena las imagenes. Funciona como un id.\n     * @param length Es largo que queremos el string.\n     * @returns Retorna un string random.\n     */\n    randomString(length) {\n        var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n        for (var i = 0; i < length; i++) {\n            result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n        }\n        return result;\n    }\n}\nDondeDormirService.ɵfac = function DondeDormirService_Factory(t) { return new (t || DondeDormirService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.LocalStorageService)); };\nDondeDormirService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DondeDormirService, factory: DondeDormirService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}