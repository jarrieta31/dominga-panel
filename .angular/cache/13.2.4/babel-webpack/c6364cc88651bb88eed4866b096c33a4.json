{"ast":null,"code":"import _asyncToGenerator from \"/home/administrador/angular/dominga-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../shared/services/local-storage.service\";\nexport class InformacionService {\n  constructor(afs, ls) {\n    this.afs = afs;\n    this.ls = ls;\n    this.informacion = [];\n    this.idNuevoInformacion = '';\n    this.informacionRef = this.afs.collection('informacion');\n    this.mapCache = new Map();\n    this.informacion$ = new BehaviorSubject(this.informacion);\n  }\n  /**\n   * Obtiene todos los informacion desde firestore y los almacena en informacion[] para\n   * no estar consultado la base y minimizar el traficio.\n   */\n\n\n  getInformacionFirestore(dpto) {\n    if (!this.mapCache.has(dpto)) {\n      console.log(\"get informacion \" + dpto + \" desde firestore\"); //this.afs.collection('informacion').ref.where('departamento', \"==\", dpto).where('fechaFin', \">=\", Timestamp.fromDate(fechaActual) ).orderBy('fechaFin').get().then(\n\n      this.informacionRef.ref.where('departamento', \"==\", dpto).get().then(querySnapshot => {\n        let arrInfo = [];\n        querySnapshot.forEach(item => {\n          const data = item.data();\n          arrInfo.push(Object.assign({\n            id: item.id\n          }, data));\n        });\n        this.mapCache.set(dpto, arrInfo.slice());\n        this.informacion = arrInfo.slice(); //this.informacion$.next(this.informacion); //el subject lugares$ emite los lugares\n\n        this.getInformacionFiltrados();\n      }).catch(error => {\n        console.error(\"Error en getInformacionFirestore(). error:\" + error);\n      });\n    } else {\n      console.log(\"get informacion \" + dpto + \" desde la cache de Informacion\");\n      let arrInfo = [];\n      arrInfo = this.mapCache.get(dpto);\n      this.informacion = arrInfo.slice();\n      this.getInformacionFiltrados(); //this.informacion$.next(this.informacion)\n    }\n  }\n\n  getInformacionFiltrados() {\n    // Por departamento\n    if (this.ls.localidad === '' && this.ls.publicado === 'todos') {\n      this.informacion$.next(this.informacion);\n    } // Departamento y Publidados\n    else if (this.ls.localidad === '' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n      this.informacion$.next(this.informacion.filter(info => info.publicado == p));\n    } // Departamento y Localidad \n    else if (this.ls.localidad !== '' && this.ls.publicado === 'todos') {\n      this.informacion$.next(this.informacion.filter(info => info.localidad === this.ls.localidad));\n    } // Departamento, Localidad y Publidados\n    else if (this.ls.localidad !== '' && this.ls.publicado !== 'todos') {\n      let p = this.ls.publicado === 'publicados' ? true : false;\n      this.informacion$.next(this.informacion.filter(info => info.localidad === this.ls.localidad && info.publicado == p));\n    }\n  }\n  /** Obtiene el Informacion a partir del id que recibe y */\n\n\n  getInformacionId(id) {\n    const inforEncontrada = this.informacion.filter(item => item.id == id);\n    return from(inforEncontrada);\n  }\n  /**\n   * Agrega un Informacion en firestore, obteniendo el id resultante para luego insertarlo en el\n   * array local informacion.\n   * @param Informacion Contiene la información del nuevo Informacion.\n   * @returns Retorna el ID del Informacion obtenido de firestore\n   */\n\n\n  addInformacion(info) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let nuevoId;\n\n      try {\n        const documentRef = yield _this.informacionRef.add(info);\n        nuevoId = documentRef.id;\n        info.id = nuevoId;\n\n        _this.informacion.push(info);\n\n        _this.mapCache.set(info.departamento, _this.informacion);\n      } catch (error) {\n        console.error(\"Se produjo un error al agregar un nuevo Informacion. Error: \" + error);\n      }\n\n      return new Promise((resolve, reject) => {\n        if (nuevoId !== undefined && nuevoId.length > 0) {\n          resolve(nuevoId);\n        } else {\n          reject(\"No se puedo obtener el ID\");\n        }\n      });\n    })();\n  }\n  /**\n   * Actuliza la información de lugar en la nube de Firestore, utilizando el método destructivo \"set\" (borra todo lo que este y\n   * guarda solo los valores actuales).\n   * @param lugar Contiene todos los datos del lugar menos el ID.\n   * @returns\n   */\n\n\n  updateInformacionFirestore(info, id) {\n    return this.afs.doc(`informacion/${id}`).set(info); //en ves de pasar el lugar completo se puede poner campo por campo        \n  }\n  /**\n   * Actualiza la información de un lugar ya existente en el array local lugares.\n   * @param data Es la data con toda la información del lugar includio el ID\n   */\n\n\n  updateInformacionLocal(data) {\n    let i = this.informacion.findIndex(info => info.id === data.id);\n    this.informacion[i] = JSON.parse(JSON.stringify(data));\n    this.mapCache.set(data.departamento, this.informacion);\n  }\n\n  getCache(nombreDpto) {\n    return this.mapCache.get(nombreDpto);\n  }\n  /**\n   * Obtiene el observable del Subject informacion$ con la lista de todos los informacion.\n   * @returns {Observable}\n   */\n\n\n  getObsInformacion$() {\n    return this.informacion$.asObservable();\n  }\n\n  emitirInformacion() {\n    this.informacion$.next(this.informacion);\n  }\n  /** Elimina correctamente el Informacion */\n\n\n  deleteInformacion(id) {\n    let indiceEliminar = this.informacion.findIndex(item => item.id === id);\n    this.informacionRef.doc(id).delete().then(res => {\n      this.informacion.splice(indiceEliminar, 1);\n      this.emitirInformacion();\n      console.log(\"Informacion eliminado correntamente\");\n    }).catch(err => {\n      console.error(\"Se produjo un error al intentar eliminar un el Informacion \" + id + \". Error:\" + err);\n    });\n  }\n  /**\n   *  Función para generar string random, se utilizar para crear el nombre de la carpeta\n   * que almacena las imagenes. Funciona como un id.\n   * @param length Es largo que queremos el string.\n   * @returns Retorna un string random.\n   */\n\n\n  randomString(length) {\n    var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var result = '';\n\n    for (var i = 0; i < length; i++) {\n      result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n    }\n\n    return result;\n  }\n\n}\n\nInformacionService.ɵfac = function InformacionService_Factory(t) {\n  return new (t || InformacionService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.LocalStorageService));\n};\n\nInformacionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InformacionService,\n  factory: InformacionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/administrador/angular/dominga-panel/src/app/informacion/services/informacion.service.ts"],"names":["BehaviorSubject","from","i0","i1","i2","InformacionService","constructor","afs","ls","informacion","idNuevoInformacion","informacionRef","collection","mapCache","Map","informacion$","getInformacionFirestore","dpto","has","console","log","ref","where","get","then","querySnapshot","arrInfo","forEach","item","data","push","Object","assign","id","set","slice","getInformacionFiltrados","catch","error","localidad","publicado","next","p","filter","info","getInformacionId","inforEncontrada","addInformacion","nuevoId","documentRef","add","departamento","Promise","resolve","reject","undefined","length","updateInformacionFirestore","doc","updateInformacionLocal","i","findIndex","JSON","parse","stringify","getCache","nombreDpto","getObsInformacion$","asObservable","emitirInformacion","deleteInformacion","indiceEliminar","delete","res","splice","err","randomString","randomChars","result","charAt","Math","floor","random","ɵfac","InformacionService_Factory","t","ɵɵinject","AngularFirestore","LocalStorageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../../shared/services/local-storage.service\";\nexport class InformacionService {\n    constructor(afs, ls) {\n        this.afs = afs;\n        this.ls = ls;\n        this.informacion = [];\n        this.idNuevoInformacion = '';\n        this.informacionRef = this.afs.collection('informacion');\n        this.mapCache = new Map();\n        this.informacion$ = new BehaviorSubject(this.informacion);\n    }\n    /**\n     * Obtiene todos los informacion desde firestore y los almacena en informacion[] para\n     * no estar consultado la base y minimizar el traficio.\n     */\n    getInformacionFirestore(dpto) {\n        if (!this.mapCache.has(dpto)) {\n            console.log(\"get informacion \" + dpto + \" desde firestore\");\n            //this.afs.collection('informacion').ref.where('departamento', \"==\", dpto).where('fechaFin', \">=\", Timestamp.fromDate(fechaActual) ).orderBy('fechaFin').get().then(\n            this.informacionRef.ref.where('departamento', \"==\", dpto).get().then(querySnapshot => {\n                let arrInfo = [];\n                querySnapshot.forEach(item => {\n                    const data = item.data();\n                    arrInfo.push(Object.assign({ id: item.id }, data));\n                });\n                this.mapCache.set(dpto, arrInfo.slice());\n                this.informacion = arrInfo.slice();\n                //this.informacion$.next(this.informacion); //el subject lugares$ emite los lugares\n                this.getInformacionFiltrados();\n            }).catch(error => {\n                console.error(\"Error en getInformacionFirestore(). error:\" + error);\n            });\n        }\n        else {\n            console.log(\"get informacion \" + dpto + \" desde la cache de Informacion\");\n            let arrInfo = [];\n            arrInfo = this.mapCache.get(dpto);\n            this.informacion = arrInfo.slice();\n            this.getInformacionFiltrados();\n            //this.informacion$.next(this.informacion)\n        }\n    }\n    getInformacionFiltrados() {\n        // Por departamento\n        if (this.ls.localidad === '' && this.ls.publicado === 'todos') {\n            this.informacion$.next(this.informacion);\n        }\n        // Departamento y Publidados\n        else if (this.ls.localidad === '' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            this.informacion$.next(this.informacion.filter(info => info.publicado == p));\n        }\n        // Departamento y Localidad \n        else if (this.ls.localidad !== '' && this.ls.publicado === 'todos') {\n            this.informacion$.next(this.informacion.filter(info => info.localidad === this.ls.localidad));\n        }\n        // Departamento, Localidad y Publidados\n        else if (this.ls.localidad !== '' && this.ls.publicado !== 'todos') {\n            let p = this.ls.publicado === 'publicados' ? true : false;\n            this.informacion$.next(this.informacion.filter(info => info.localidad === this.ls.localidad && info.publicado == p));\n        }\n    }\n    /** Obtiene el Informacion a partir del id que recibe y */\n    getInformacionId(id) {\n        const inforEncontrada = this.informacion.filter(item => item.id == id);\n        return from(inforEncontrada);\n    }\n    /**\n     * Agrega un Informacion en firestore, obteniendo el id resultante para luego insertarlo en el\n     * array local informacion.\n     * @param Informacion Contiene la información del nuevo Informacion.\n     * @returns Retorna el ID del Informacion obtenido de firestore\n     */\n    async addInformacion(info) {\n        let nuevoId;\n        try {\n            const documentRef = await this.informacionRef.add(info);\n            nuevoId = documentRef.id;\n            info.id = nuevoId;\n            this.informacion.push(info);\n            this.mapCache.set(info.departamento, this.informacion);\n        }\n        catch (error) {\n            console.error(\"Se produjo un error al agregar un nuevo Informacion. Error: \" + error);\n        }\n        return new Promise((resolve, reject) => {\n            if (nuevoId !== undefined && nuevoId.length > 0) {\n                resolve(nuevoId);\n            }\n            else {\n                reject(\"No se puedo obtener el ID\");\n            }\n        });\n    }\n    /**\n     * Actuliza la información de lugar en la nube de Firestore, utilizando el método destructivo \"set\" (borra todo lo que este y\n     * guarda solo los valores actuales).\n     * @param lugar Contiene todos los datos del lugar menos el ID.\n     * @returns\n     */\n    updateInformacionFirestore(info, id) {\n        return this.afs.doc(`informacion/${id}`).set(info); //en ves de pasar el lugar completo se puede poner campo por campo        \n    }\n    /**\n     * Actualiza la información de un lugar ya existente en el array local lugares.\n     * @param data Es la data con toda la información del lugar includio el ID\n     */\n    updateInformacionLocal(data) {\n        let i = this.informacion.findIndex(info => info.id === data.id);\n        this.informacion[i] = JSON.parse(JSON.stringify(data));\n        this.mapCache.set(data.departamento, this.informacion);\n    }\n    getCache(nombreDpto) {\n        return this.mapCache.get(nombreDpto);\n    }\n    /**\n     * Obtiene el observable del Subject informacion$ con la lista de todos los informacion.\n     * @returns {Observable}\n     */\n    getObsInformacion$() {\n        return this.informacion$.asObservable();\n    }\n    emitirInformacion() {\n        this.informacion$.next(this.informacion);\n    }\n    /** Elimina correctamente el Informacion */\n    deleteInformacion(id) {\n        let indiceEliminar = this.informacion.findIndex(item => item.id === id);\n        this.informacionRef.doc(id).delete().then(res => {\n            this.informacion.splice(indiceEliminar, 1);\n            this.emitirInformacion();\n            console.log(\"Informacion eliminado correntamente\");\n        }).catch(err => {\n            console.error(\"Se produjo un error al intentar eliminar un el Informacion \" + id + \". Error:\" + err);\n        });\n    }\n    /**\n     *  Función para generar string random, se utilizar para crear el nombre de la carpeta\n     * que almacena las imagenes. Funciona como un id.\n     * @param length Es largo que queremos el string.\n     * @returns Retorna un string random.\n     */\n    randomString(length) {\n        var randomChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var result = '';\n        for (var i = 0; i < length; i++) {\n            result += randomChars.charAt(Math.floor(Math.random() * randomChars.length));\n        }\n        return result;\n    }\n}\nInformacionService.ɵfac = function InformacionService_Factory(t) { return new (t || InformacionService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.LocalStorageService)); };\nInformacionService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: InformacionService, factory: InformacionService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}